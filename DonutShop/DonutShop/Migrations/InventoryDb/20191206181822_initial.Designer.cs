// <auto-generated />
using DonutShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DonutShop.Migrations.InventoryDb
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20191206181822_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DonutShop.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DonutShop.Models.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("DonutID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("DonutID")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Boozey")
                        .HasColumnType("bit");

                    b.Property<bool>("CreamFilled")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Donuts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Boozey = true,
                            CreamFilled = false,
                            Description = "Cinnamon with a twist! A cinnamon twist donut made with a fiery cinnamon whiskey.",
                            ImageName = "CinnamonWhiskeyTwist.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/CinnamonWhiskeyTwist.png",
                            Name = "Cinnamon Whiskey Twist",
                            Price = 5.5m,
                            SKU = "111"
                        },
                        new
                        {
                            ID = 2,
                            Boozey = true,
                            CreamFilled = true,
                            Description = "A maple bar, but better. It's cream filled. But better still! The cream is a rum cream for the best kick in a donut!",
                            ImageName = "CreamFIlledRumMapleBar.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/CreamFilledRumMapleBar.png",
                            Name = "Cream Filled Rum Maple Bar",
                            Price = 5.5m,
                            SKU = "222"
                        },
                        new
                        {
                            ID = 3,
                            Boozey = false,
                            CreamFilled = false,
                            Description = "Your tried and true, lovely maple bar. No other description required.",
                            ImageName = "MapleBar.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/MapleBar.png",
                            Name = "Maple Bar",
                            Price = 2.5m,
                            SKU = "333"
                        },
                        new
                        {
                            ID = 4,
                            Boozey = false,
                            CreamFilled = false,
                            Description = "Old fashioned donut covered in glaze and made ready to eat! Oldy but goody!",
                            ImageName = "OldFashioned.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/OldFashioned.png",
                            Name = "Old Fashioned",
                            Price = 2.5m,
                            SKU = "444"
                        },
                        new
                        {
                            ID = 5,
                            Boozey = false,
                            CreamFilled = true,
                            Description = "A chocolate covered donut full of chocolate cream. Double chocolate for the chocolate lovers.",
                            ImageName = "ChocolateCreamFilled.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/ChocolateCreamFilled.png",
                            Name = "Chocolate Cream Filled",
                            Price = 3m,
                            SKU = "555"
                        },
                        new
                        {
                            ID = 6,
                            Boozey = false,
                            CreamFilled = false,
                            Description = "A classic donut covered in chocolate frosting. It's amazing, simple and delicious.",
                            ImageName = "ChocolateFrosting.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/ChocolateFrosting.png",
                            Name = "Chocolate Frosting",
                            Price = 2.5m,
                            SKU = "666"
                        },
                        new
                        {
                            ID = 7,
                            Boozey = false,
                            CreamFilled = false,
                            Description = "A donut twist covered in delicious cinnamon sugar. Delicious!",
                            ImageName = "CinnamonTwist.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/CinnamonTwist.png",
                            Name = "Cinnamon Twist",
                            Price = 2.5m,
                            SKU = "777"
                        },
                        new
                        {
                            ID = 8,
                            Boozey = false,
                            CreamFilled = true,
                            Description = "Your classic maple bar, but why not add more? Cream filled and wonderful.",
                            ImageName = "CreamFilledMapleBar.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/CreamFilledMapleBar.png",
                            Name = "Cream Filled Maple Bar",
                            Price = 3m,
                            SKU = "888"
                        },
                        new
                        {
                            ID = 9,
                            Boozey = false,
                            CreamFilled = false,
                            Description = "A confetti cake style donut covered in frosting and sprinkles! Very festive and very tasty.",
                            ImageName = "Confetti.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/Confetti.png",
                            Name = "Confetti",
                            Price = 2.5m,
                            SKU = "999"
                        },
                        new
                        {
                            ID = 10,
                            Boozey = true,
                            CreamFilled = true,
                            Description = "Our confetti donut but filled with a vodka cream. Celebrate your favorite event!",
                            ImageName = "VodkaCreamFilledConfetti.png",
                            ImageUrl = "https://cnjdonuts.blob.core.windows.net/products/VodkaCreamFilledConfetti.png",
                            Name = "Vodka Cream Filled Confetti",
                            Price = 5.5m,
                            SKU = "101"
                        });
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DonutShop.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("DonutID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "DonutID");

                    b.HasIndex("DonutID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DonutShop.Models.CartItem", b =>
                {
                    b.HasOne("DonutShop.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonutShop.Models.Donut", "Donut")
                        .WithOne("CartItem")
                        .HasForeignKey("DonutShop.Models.CartItem", "DonutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DonutShop.Models.OrderItem", b =>
                {
                    b.HasOne("DonutShop.Models.Donut", "Donut")
                        .WithMany()
                        .HasForeignKey("DonutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonutShop.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
